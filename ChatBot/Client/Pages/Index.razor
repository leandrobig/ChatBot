@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable


<PageTitle>mIRC chat</PageTitle>
<h3>Chat da uol</h3>

@if(!IsConnected)
{
    <div class="input-group">
        <input @bind="username" class="form-control" placeholder="Nick">
        <button class="btn btn-primary form-control-append" @onclick="Connect">Connect</button>
    </div>
}
else
{
    <textarea style="width:100%; height: 500px;">
        @messageh

    </textarea>

    <div class="input-group">
        <input  @bind-value="usermessage" 
                @bind-value:event="oninput" 
                @onkeyup="HandleInput"
                class="form-control">
        <button class="btn btn-primary form-group-append"
                @onclick="Send"
                disabled="@(!IsConnected)"
        >
        Enviar mensagem
        </button>
    </div>
}


@code {
    private HubConnection? hubConnection;
    private string messageh = string.Empty;
    private string username = string.Empty;
    private string usermessage = string.Empty;
    ElementReference MessageAreaRef;

    public bool IsConnected => hubConnection?.State == HubConnectionState.Connected;

    private async Task Connect() { 
        hubConnection = new HubConnectionBuilder().WithUrl(NavigationManager.ToAbsoluteUri($"/chathub?username={ username }")).Build(); 

        hubConnection.On<string,string>("ReceiveMessage", (username,usermessage) => {
            var msg = $"{ (string.IsNullOrEmpty(username) ? "" : username + ": ")} {usermessage}";
            messageh += msg + "\n";
            JSRuntime.InvokeVoidAsync("scrollToBottom",MessageAreaRef);
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendMessage", username,usermessage);
            usermessage = string.Empty;
        }
    }

    private async Task HandleInput(KeyboardEventArgs args)
    {
        if(args.Key==null|| args.Key.Equals("Enter"))
        {
            await Send();
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection != null)
        {
            await hubConnection.DisposeAsync();
        }
    }

}